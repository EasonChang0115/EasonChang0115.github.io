(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{608:function(t,e,a){"use strict";a.r(e);var r=a(15),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("通常我們在寫一般網站時，很少會去注意 Event Loop 這個概念的東西，而當開始認真對於 Javascript 有一定的理解後，尤其大量的操作畫面的元素、堆疊、非同步呼叫等等，發現若不對 Event Loop　有一定的理解，其實在很多異步操作上都會有點點卡住，所以大致上整理並理解 Event Loop。")]),t._v(" "),a("h2",{attrs:{id:"event-loop-瀏覽器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-瀏覽器"}},[t._v("#")]),t._v(" Event Loop 瀏覽器")]),t._v(" "),a("p",[t._v("很多人在學 Javascript 的時候，都會分為同步跟非同步事件來處理，但是卻又聽到 JavaScript 是單線程（single threaded runtime）的程式語言，所有的程式碼片段都會在堆疊中（stack）被執行，而且一次只會執行一個程式碼片段。那怎麼可能會實現什麼非同步操作呢?")]),t._v(" "),a("p",[t._v("為了實現主線程不阻塞，所以在 "),a("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/webappapis.html#event-loops",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML Living Standard"),a("OutboundLink")],1),t._v(" 就明確的定義 Javascript Event Loop 的概念，用來執行所謂的非同步操作。")]),t._v(" "),a("h2",{attrs:{id:"execution-stack-執行堆疊"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#execution-stack-執行堆疊"}},[t._v("#")]),t._v(" Execution Stack 執行堆疊")]),t._v(" "),a("p",[t._v("在說明 Event Loop 前，先說明執行推疊(execution stack)，紀錄目前執行到程式的哪一個部分，如果進入到某個函式，便把這個函釋放到堆疊的最上方，執行完畢後才從堆疊移除。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/Q8Ko2V5.png",alt:""}})]),t._v(" "),a("p",[t._v("當執行 Javascipt 時，最先進入到 Stack 的會是全域環境的程式，接著 printSquareArea 被執行，會被丟到 Stack 的最上方，printSquareArea 中又呼叫 squareArea，squareArea 繼續丟到 Stack 的最上方，multiply 亦如是。每個函式到結尾或 return 時，函式的執行環境便會從 Stack 移除。")]),t._v(" "),a("h3",{attrs:{id:"思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[t._v("#")]),t._v(" 思考")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("如果函式是一個無窮迴圈：主線程會被卡住，Execution Stack 不斷的被疊加，造成記憶體溢出。(每個瀏覽器對記憶體不足或主線程卡住的處理方式都不同)。")])]),t._v(" "),a("li",[a("p",[t._v("若某個動作或函數執行時間很長，導致後面的執行堆疊無法正常運作，造成畫面不能動的卡住的情形。被稱作為阻塞（blocking）。")])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[t._v("阻塞（blocking）：當執行程式碼片段需要等待很長一段時間，或好像「卡住」的這種現象，被稱作 阻塞（blocking）。")])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("想像一下，若是對 Server 的 request 放在 Execution Stack 中執行，某一個 request 因為網路的不順，或著 Server 計算過久，遲遲等不到回應，那後面的堆疊都會被拖延無法執行，瀏覽器也沒辦法重新渲染，必須要等到 request 執行結束後瀏覽器才會繼續運作。")])]),t._v(" "),a("h2",{attrs:{id:"event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[t._v("#")]),t._v(" Event Loop")]),t._v(" "),a("p",[t._v("因為 Javascript 設計之初就是單線程語言，因此為了實現主線程的不阻塞，Event Loop 就是為了解決這個問題而被設計出來的。")]),t._v(" "),a("h3",{attrs:{id:"task-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task-queue"}},[t._v("#")]),t._v(" Task Queue")]),t._v(" "),a("p",[t._v("為了實現非同步的概念，讓單線程的 Javascript 可以在不產生 blocking 的環境下運作。因此 Javascript 引擎設計出一個任務佇列，讓特定 API 的 callback 不會到 Execution Stack 中執行，而是讓 callback 移到 Task Queue 等待執行。")]),t._v(" "),a("p",[t._v(":::info\nJavaScript 的執行時期（Runtime）一次只能做一件事，但瀏覽器提供了更多不同的 API 讓我們使用，進而讓我們可以透過 event loop 搭配非同步的方式同時處理多個事項。\n:::")]),t._v(" "),a("blockquote",[a("p",[t._v("進入到 Task Queue 的 API")])]),t._v(" "),a("ol",[a("li",[t._v("The user interaction：例如鍵盤/滑鼠等I/O事件的 callback。")]),t._v(" "),a("li",[t._v("The DOM manipulation：Dom 的操作，例如 dom.style = 'color: red'、Click Event等。")]),t._v(" "),a("li",[t._v("The networking：Ajax 時的 callback。")]),t._v(" "),a("li",[t._v("The history traversal：history.back()。")]),t._v(" "),a("li",[t._v("setTimeout/setInterval。")])]),t._v(" "),a("h3",{attrs:{id:"機制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#機制"}},[t._v("#")]),t._v(" 機制")]),t._v(" "),a("p",[t._v("Event Loop 的作用是去監控堆疊(Stack）和工作佇列（task queue），當堆疊當中沒有執行項目的時候，便把佇列中的內容拉到堆疊中去執行。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/UNKW7kn.jpg",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"microtask-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#microtask-queue"}},[t._v("#")]),t._v(" Microtask Queue")]),t._v(" "),a("p",[t._v("每一次的 Task 執行完畢後，UI 都會重新渲染，如果說有兩數據更新的方法都在 Task Queue 中等待執行，每次執行完後都會產生畫面更新，會造成畫面更新頻繁，消耗效能。\n因此才會設計另一個 Microtask Queue，當每一次的 Task 執行完畢後，會去檢查 Microtask Queue 是否還有任務，等到 Microtask Queue 清空後才會進行重新渲染，因此 Microtask 會在頁面更新之前完成數據更新，得到更高的效率。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/T7IYiA3.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("進入到 Microtask Queue 的 API")])]),t._v(" "),a("ol",[a("li",[t._v("Promise")]),t._v(" "),a("li",[t._v("process.nextTick(優先權較 Promise高)")]),t._v(" "),a("li",[t._v("MutationObserver")])]),t._v(" "),a("h2",{attrs:{id:"結論"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#結論"}},[t._v("#")]),t._v(" 結論")]),t._v(" "),a("p",[t._v("在每一個 Task 執行完畢後，會檢查是否有 Microtask，執行完成後才會重新渲染畫面。要注意的是，瀏覽器的 Event Loop 跟 node 的 Event Loop 是不一樣的。")]),t._v(" "),a("h2",{attrs:{id:"參考影片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#參考影片"}},[t._v("#")]),t._v(" 參考影片")]),t._v(" "),a("div",{staticClass:"video-block"},[a("iframe",{attrs:{width:"1280",height:"720",src:"https://www.youtube.com/embed/8aGhZQkoFbQ",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}})]),t._v(" "),a("h5",{attrs:{id:"來源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#來源"}},[t._v("#")]),t._v(" 來源：")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://medium.com/hobo-engineer/ricky%E7%AD%86%E8%A8%98-javascript-%E7%9A%84-event-loop-c17a0a49d6e4",target:"_blank",rel:"noopener noreferrer"}},[t._v("Javascript 的 Event Loop"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://yu-jack.github.io/2020/02/03/javascript-runtime-event-loop-browser/#microtask",target:"_blank",rel:"noopener noreferrer"}},[t._v("Event Loop 運行機制解析 - 瀏覽器篇"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5d5b4c2df265da03dd3d73e5#heading-4",target:"_blank",rel:"noopener noreferrer"}},[t._v("「前端进阶」从多线程到Event Loop全面梳理"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);